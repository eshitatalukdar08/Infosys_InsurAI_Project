// import React, { useState, useEffect } from 'react';
// import { policiesApi } from '../api/policiesApi';
// import PolicyCard from '../components/PolicyCard';
// import SearchBar from '../components/SearchBar';
// import { useNotifications } from '../hooks/useNotifications';

// const AdminPolicies = () => {
//   const { showSuccess, showError } = useNotifications();
//   const [policies, setPolicies] = useState([]);
//   const [filteredPolicies, setFilteredPolicies] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [searchTerm, setSearchTerm] = useState('');
//   const [showModal, setShowModal] = useState(false);
//   const [editingPolicy, setEditingPolicy] = useState(null);
//   const [formData, setFormData] = useState({
//     name: '',
//     description: '',
//     premium: '',
//     coverage: '',
//     deductible: '',
//     type: ''
//   });

//   useEffect(() => {
//     fetchPolicies();
//   }, []);

//   useEffect(() => {
//     if (searchTerm.trim() === '') {
//       setFilteredPolicies(policies);
//     } else {
//       const filtered = policies.filter(policy =>
//         policy.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
//         policy.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
//         policy.type.toLowerCase().includes(searchTerm.toLowerCase())
//       );
//       setFilteredPolicies(filtered);
//     }
//   }, [policies, searchTerm]);

//   const fetchPolicies = async () => {
//     try {
//       const data = await policiesApi.getAllPolicies();
//       setPolicies(data);
//       setFilteredPolicies(data);
//     } catch (error) {
//       console.error('Failed to fetch policies:', error);
//       showError('Failed to load policies');
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleSearch = (term) => {
//     setSearchTerm(term);
//   };

//   const handleCreateNew = () => {
//     setEditingPolicy(null);
//     setFormData({
//       name: '',
//       description: '',
//       premium: '',
//       coverage: '',
//       deductible: '',
//       type: ''
//     });
//     setShowModal(true);
//   };

//   const handleEdit = (policy) => {
//     setEditingPolicy(policy);
//     setFormData({
//       name: policy.name || '',
//       description: policy.description || '',
//       premium: policy.premium || '',
//       coverage: policy.coverage || '',
//       deductible: policy.deductible || '',
//       type: policy.type || ''
//     });
//     setShowModal(true);
//   };

//   const handleDelete = async (policyId) => {
//     if (!window.confirm('Are you sure you want to delete this policy? This action cannot be undone.')) {
//       return;
//     }

//     try {
//       await policiesApi.deletePolicy(policyId);
//       showSuccess('Policy deleted successfully');
//       fetchPolicies();
//     } catch (error) {
//       console.error('Failed to delete policy:', error);
//       showError('Failed to delete policy');
//     }
//   };

//   const handleFormChange = (e) => {
//     const { name, value } = e.target;
//     setFormData(prev => ({
//       ...prev,
//       [name]: value
//     }));
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
    
//     try {
//       const policyData = {
//         ...formData,
//         premium: parseFloat(formData.premium),
//         coverage: parseFloat(formData.coverage),
//         deductible: parseFloat(formData.deductible)
//       };

//       if (editingPolicy) {
//         await policiesApi.updatePolicy(editingPolicy.id, policyData);
//         showSuccess('Policy updated successfully');
//       } else {
//         await policiesApi.createPolicy(policyData);
//         showSuccess('Policy created successfully');
//       }
      
//       setShowModal(false);
//       fetchPolicies();
//     } catch (error) {
//       console.error('Failed to save policy:', error);
//       showError(`Failed to ${editingPolicy ? 'update' : 'create'} policy`);
//     }
//   };

//   const closeModal = () => {
//     setShowModal(false);
//     setEditingPolicy(null);
//   };

//   return (
//     <div className="space-y-6">
//       {/* Header */}
//       <div className="flex justify-between items-center">
//         <div>
//           <h1 className="text-2xl font-bold text-gray-900">Manage Policies</h1>
//           <p className="text-gray-600">Create, edit, and manage insurance policies</p>
//         </div>
//         <button
//           onClick={handleCreateNew}
//           className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
//         >
//           Create New Policy
//         </button>
//       </div>

//       {/* Search Bar */}
//       <div className="bg-white p-6 rounded-lg shadow">
//         <SearchBar
//           onSearch={handleSearch}
//           placeholder="Search policies by name, description, or type..."
//           className="w-full"
//         />
//       </div>

//       {/* Policies Grid */}
//       <div className="bg-white rounded-lg shadow">
//         <div className="p-6">
//           {loading ? (
//             <div className="text-center py-12">
//               <div className="spinner mb-4 mx-auto"></div>
//               <p className="text-gray-600">Loading policies...</p>
//             </div>
//           ) : filteredPolicies.length === 0 ? (
//             <div className="text-center py-12">
//               <div className="text-gray-400 text-6xl mb-4">ðŸ“‹</div>
//               <h3 className="text-xl font-semibold text-gray-900 mb-2">
//                 {searchTerm ? 'No policies found' : 'No policies created'}
//               </h3>
//               <p className="text-gray-600 mb-4">
//                 {searchTerm 
//                   ? 'Try adjusting your search terms' 
//                   : 'Create your first insurance policy to get started'}
//               </p>
//               {!searchTerm && (
//                 <button
//                   onClick={handleCreateNew}
//                   className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
//                 >
//                   Create First Policy
//                 </button>
//               )}
//             </div>
//           ) : (
//             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
//               {filteredPolicies.map((policy) => (
//                 <PolicyCard
//                   key={policy.id}
//                   policy={policy}
//                   showActions={true}
//                   onEdit={handleEdit}
//                   onDelete={handleDelete}
//                 />
//               ))}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Policy Form Modal */}
//       {showModal && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
//           <div className="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto">
//             {/* Modal Header */}
//             <div className="flex justify-between items-center p-6 border-b">
//               <h2 className="text-xl font-semibold">
//                 {editingPolicy ? 'Edit Policy' : 'Create New Policy'}
//               </h2>
//               <button
//                 onClick={closeModal}
//                 className="text-gray-400 hover:text-gray-600"
//               >
//                 <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth={2}
//                     d="M6 18L18 6M6 6l12 12"
//                   />
//                 </svg>
//               </button>
//             </div>

//             {/* Modal Form */}
//             <form onSubmit={handleSubmit} className="p-6">
//               <div className="space-y-4">
//                 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//                   <div>
//                     <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
//                       Policy Name *
//                     </label>
//                     <input
//                       type="text"
//                       id="name"
//                       name="name"
//                       value={formData.name}
//                       onChange={handleFormChange}
//                       required
//                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                       placeholder="e.g., Auto Insurance Premium"
//                     />
//                   </div>

//                   <div>
//                     <label htmlFor="type" className="block text-sm font-medium text-gray-700 mb-1">
//                       Policy Type *
//                     </label>
//                     <select
//                       id="type"
//                       name="type"
//                       value={formData.type}
//                       onChange={handleFormChange}
//                       required
//                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                     >
//                       <option value="">Select type</option>
//                       <option value="Auto">Auto Insurance</option>
//                       <option value="Home">Home Insurance</option>
//                       <option value="Health">Health Insurance</option>
//                       <option value="Life">Life Insurance</option>
//                       <option value="Travel">Travel Insurance</option>
//                       <option value="Business">Business Insurance</option>
//                     </select>
//                   </div>

//                   <div>
//                     <label htmlFor="premium" className="block text-sm font-medium text-gray-700 mb-1">
//                       Monthly Premium ($) *
//                     </label>
//                     <input
//                       type="number"
//                       id="premium"
//                       name="premium"
//                       value={formData.premium}
//                       onChange={handleFormChange}
//                       required
//                       min="0"
//                       step="0.01"
//                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                       placeholder="99.99"
//                     />
//                   </div>

//                   <div>
//                     <label htmlFor="coverage" className="block text-sm font-medium text-gray-700 mb-1">
//                       Coverage Amount ($) *
//                     </label>
//                     <input
//                       type="number"
//                       id="coverage"
//                       name="coverage"
//                       value={formData.coverage}
//                       onChange={handleFormChange}
//                       required
//                       min="0"
//                       step="0.01"
//                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                       placeholder="100000"
//                     />
//                   </div>

//                   <div className="md:col-span-2">
//                     <label htmlFor="deductible" className="block text-sm font-medium text-gray-700 mb-1">
//                       Deductible ($) *
//                     </label>
//                     <input
//                       type="number"
//                       id="deductible"
//                       name="deductible"
//                       value={formData.deductible}
//                       onChange={handleFormChange}
//                       required
//                       min="0"
//                       step="0.01"
//                       className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                       placeholder="500"
//                     />
//                   </div>
//                 </div>

//                 <div>
//                   <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
//                     Description *
//                   </label>
//                   <textarea
//                     id="description"
//                     name="description"
//                     value={formData.description}
//                     onChange={handleFormChange}
//                     required
//                     rows="4"
//                     className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
//                     placeholder="Provide a detailed description of the policy coverage and benefits..."
//                   />
//                 </div>
//               </div>

//               {/* Form Actions */}
//               <div className="flex justify-end space-x-3 mt-6 pt-6 border-t">
//                 <button
//                   type="button"
//                   onClick={closeModal}
//                   className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
//                 >
//                   Cancel
//                 </button>
//                 <button
//                   type="submit"
//                   className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
//                 >
//                   {editingPolicy ? 'Update Policy' : 'Create Policy'}
//                 </button>
//               </div>
//             </form>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default AdminPolicies;

import React, { useState, useEffect } from 'react';
import { policiesApi } from '../api/policiesApi';
import PolicyCard from '../components/PolicyCard';
import SearchBar from '../components/SearchBar';
import { useNotifications } from '../hooks/useNotifications';

const AdminPolicies = () => {
Â  const { showSuccess, showError } = useNotifications();
Â  const [policies, setPolicies] = useState([]);
Â  const [filteredPolicies, setFilteredPolicies] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  const [searchTerm, setSearchTerm] = useState('');
Â  const [showModal, setShowModal] = useState(false);
Â  const [editingPolicy, setEditingPolicy] = useState(null);
Â  // FIX: Added policyNumber to formData state
Â  const [formData, setFormData] = useState({
Â  Â  policyNumber: '',
Â  Â  policyName: '',
Â  Â  description: '',
Â  Â  monthlyPremium: '',
Â  Â  coverageAmount: '',
Â  Â  deductible: '',
Â  Â  policyType: ''
Â  });

Â  useEffect(() => {
Â  Â  fetchPolicies();
Â  }, []);

Â  useEffect(() => {
Â  Â  if (searchTerm.trim() === '') {
Â  Â  Â  setFilteredPolicies(policies);
Â  Â  } else {
Â  Â  Â  const filtered = policies.filter(policy =>
Â  Â  Â  Â  policy.policyName.toLowerCase().includes(searchTerm.toLowerCase()) ||
Â  Â  Â  Â  policy.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
Â  Â  Â  Â  policy.policyType.toLowerCase().includes(searchTerm.toLowerCase())
Â  Â  Â  );
Â  Â  Â  setFilteredPolicies(filtered);
Â  Â  }
Â  }, [policies, searchTerm]);

Â  const fetchPolicies = async () => {
Â  Â  try {
Â  Â  Â  const data = await policiesApi.getAllPolicies();
Â  Â  Â  setPolicies(data);
Â  Â  Â  setFilteredPolicies(data);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to fetch policies:', error);
Â  Â  Â  showError('Failed to load policies');
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  const handleSearch = (term) => {
Â  Â  setSearchTerm(term);
Â  };

Â  const handleCreateNew = () => {
Â  Â  setEditingPolicy(null);
Â  Â  // FIX: Added policyNumber to formData reset
Â  Â  setFormData({
Â  Â  Â  policyNumber: '',
Â  Â  Â  policyName: '',
Â  Â  Â  description: '',
Â  Â  Â  monthlyPremium: '',
Â  Â  Â  coverageAmount: '',
Â  Â  Â  deductible: '',
Â  Â  Â  policyType: ''
Â  Â  });
Â  Â  setShowModal(true);
Â  };

Â  const handleEdit = (policy) => {
Â  Â  setEditingPolicy(policy);
Â  Â  // FIX: Added policyNumber to formData for editing
Â  Â  setFormData({
Â  Â  Â  policyNumber: policy.policyNumber || '',
Â  Â  Â  policyName: policy.policyName || '',
Â  Â  Â  description: policy.description || '',
Â  Â  Â  monthlyPremium: policy.monthlyPremium || '',
Â  Â  Â  coverageAmount: policy.coverageAmount || '',
Â  Â  Â  deductible: policy.deductible || '',
Â  Â  Â  policyType: policy.policyType || ''
Â  Â  });
Â  Â  setShowModal(true);
Â  };

Â  const handleDelete = async (policyId) => {
Â  Â  if (!window.confirm('Are you sure you want to delete this policy? This action cannot be undone.')) {
Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  await policiesApi.deletePolicy(policyId);
Â  Â  Â  showSuccess('Policy deleted successfully');
Â  Â  Â  fetchPolicies();
Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to delete policy:', error);
Â  Â  Â  showError('Failed to delete policy');
Â  Â  }
Â  };

Â  const handleFormChange = (e) => {
Â  Â  const { name, value } = e.target;
Â  Â  setFormData(prev => ({
Â  Â  Â  ...prev,
Â  Â  Â  [name]: value
Â  Â  }));
Â  };

Â  // Function to generate a simple policy number
Â  const generatePolicyNumber = () => {
Â  Â  const timestamp = Date.now();
Â  Â  return `POL-${timestamp}`;
Â  };
Â  
Â  const handleSubmit = async (e) => {
Â  Â  e.preventDefault();
Â  Â  
Â  Â  try {
Â  Â  Â  // FIX: Ensure all fields are included in the request
Â  Â  Â  const policyData = {
Â  Â  Â  Â  policyNumber: editingPolicy ? editingPolicy.policyNumber : generatePolicyNumber(),
Â  Â  Â  Â  policyName: formData.policyName,
Â  Â  Â  Â  policyType: formData.policyType,
Â  Â  Â  Â  description: formData.description,
Â  Â  Â  Â  monthlyPremium: parseFloat(formData.monthlyPremium),
Â  Â  Â  Â  coverageAmount: parseFloat(formData.coverageAmount),
Â  Â  Â  Â  deductible: parseFloat(formData.deductible),
Â  Â  Â  Â  // This maps to the backend's required 'premium' field
Â  Â  Â  Â  premium: parseFloat(formData.monthlyPremium),
Â  Â  Â  };

Â  Â  Â  if (editingPolicy) {
Â  Â  Â  Â  await policiesApi.updatePolicy(editingPolicy.id, policyData);
Â  Â  Â  Â  showSuccess('Policy updated successfully');
Â  Â  Â  } else {
Â  Â  Â  Â  await policiesApi.createPolicy(policyData);
Â  Â  Â  Â  showSuccess('Policy created successfully');
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  setShowModal(false);
Â  Â  Â  fetchPolicies();
Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to save policy:', error);
Â  Â  Â  showError(`Failed to ${editingPolicy ? 'update' : 'create'} policy`);
Â  Â  }
Â  };

Â  const closeModal = () => {
Â  Â  setShowModal(false);
Â  Â  setEditingPolicy(null);
Â  };

Â  return (
Â  Â  <div className="space-y-6">
Â  Â  Â  {/* Header */}
Â  Â  Â  <div className="flex justify-between items-center">
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <h1 className="text-2xl font-bold text-gray-900">Manage Policies</h1>
Â  Â  Â  Â  Â  <p className="text-gray-600">Create, edit, and manage insurance policies</p>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={handleCreateNew}
Â  Â  Â  Â  Â  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Create New Policy
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {/* Search Bar */}
Â  Â  Â  <div className="bg-white p-6 rounded-lg shadow">
Â  Â  Â  Â  <SearchBar
Â  Â  Â  Â  Â  onSearch={handleSearch}
Â  Â  Â  Â  Â  placeholder="Search policies by name, description, or type..."
Â  Â  Â  Â  Â  className="w-full"
Â  Â  Â  Â  />
Â  Â  Â  </div>

Â  Â  Â  {/* Policies Grid */}
Â  Â  Â  <div className="bg-white rounded-lg shadow">
Â  Â  Â  Â  <div className="p-6">
Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  <div className="text-center py-12">
Â  Â  Â  Â  Â  Â  Â  <div className="spinner mb-4 mx-auto"></div>
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600">Loading policies...</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : filteredPolicies.length === 0 ? (
Â  Â  Â  Â  Â  Â  <div className="text-center py-12">
Â  Â  Â  Â  Â  Â  Â  <div className="text-gray-400 text-6xl mb-4">ðŸ“‹</div>
Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-semibold text-gray-900 mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  {searchTerm ? 'No policies found' : 'No policies created'}
Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  {searchTerm 
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'Try adjusting your search terms' 
Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'Create your first insurance policy to get started'}
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  {!searchTerm && (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleCreateNew}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Create First Policy
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
Â  Â  Â  Â  Â  Â  Â  {filteredPolicies.map((policy) => (
Â  Â  Â  Â  Â  Â  Â  Â  <PolicyCard
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={policy.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  policy={policy}
Â  Â  Â  Â  Â  Â  Â  Â  Â  showActions={true}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onEdit={handleEdit}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onDelete={handleDelete}
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Policy Form Modal */}
Â  Â  Â  {showModal && (
Â  Â  Â  Â  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
Â  Â  Â  Â  Â  <div className="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto">
Â  Â  Â  Â  Â  Â  {/* Modal Header */}
Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center p-6 border-b">
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold">
Â  Â  Â  Â  Â  Â  Â  Â  {editingPolicy ? 'Edit Policy' : 'Create New Policy'}
Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={closeModal}
Â  Â  Â  Â  Â  Â  Â  Â  className="text-gray-400 hover:text-gray-600"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <path
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeLinecap="round"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeLinejoin="round"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeWidth={2}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  d="M6 18L18 6M6 6l12 12"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Modal Form */}
Â  Â  Â  Â  Â  Â  <form onSubmit={handleSubmit} className="p-6">
Â  Â  Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  {/* FIX: Add policyNumber input field */}
Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="policyNumber" className="block text-sm font-medium text-gray-700 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Policy Number *
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="policyNumber"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="policyNumber"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.policyNumber}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g., POL-123456"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="policyName" className="block text-sm font-medium text-gray-700 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Policy Name *
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="policyName"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="policyName"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.policyName}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="e.g., Auto Insurance Premium"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="policyType" className="block text-sm font-medium text-gray-700 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Policy Type *
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="policyType"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="policyType"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.policyType}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select type</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Auto">Auto Insurance</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Home">Home Insurance</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Health">Health Insurance</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Life">Life Insurance</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Travel">Travel Insurance</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="Business">Business Insurance</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="monthlyPremium" className="block text-sm font-medium text-gray-700 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Monthly Premium ($) *
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="monthlyPremium"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="monthlyPremium"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.monthlyPremium}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="99.99"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="coverageAmount" className="block text-sm font-medium text-gray-700 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Coverage Amount ($) *
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="coverageAmount"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="coverageAmount"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.coverageAmount}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="100000"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="md:col-span-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="deductible" className="block text-sm font-medium text-gray-700 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Deductible ($) *
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="deductible"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="deductible"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.deductible}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  step="0.01"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Description *
Â  Â  Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id="description"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  name="description"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={formData.description}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleFormChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  rows="4"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Provide a detailed description of the policy coverage and benefits..."
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Form Actions */}
Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-end space-x-3 mt-6 pt-6 border-t">
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={closeModal}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {editingPolicy ? 'Update Policy' : 'Create Policy'}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

export default AdminPolicies;